#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Ç–∞—Ç—É-—Å—Ç—É–¥–∏–∏
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –±–æ—Ç –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
"""

import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL Mini App
MINI_APP_URL = "https://Jettattoo.github.io/tattoo-studio/"

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def create_mini_app_keyboard(text: str, url_suffix: str = "") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Mini App"""
    url = f"{MINI_APP_URL}{url_suffix}" if url_suffix else MINI_APP_URL
    keyboard = [
        [InlineKeyboardButton(text, web_app=WebAppInfo(url=url))]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_name(user) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user and user.first_name:
        return user.first_name
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_name = get_user_name(user)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç: {user_name}")
        
        reply_markup = create_mini_app_keyboard("üì± –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—É–¥–∏—é")
        
        welcome_text = (
            f"üé® –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∞—Ç—É-—Å—Ç—É–¥–∏—é!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_command: {e}")

async def studio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /studio"""
    try:
        user = update.effective_user
        user_name = get_user_name(user)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /studio –æ—Ç: {user_name}")
        
        reply_markup = create_mini_app_keyboard("üì± –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—É–¥–∏—é")
        await update.message.reply_text("üé® –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—É–¥–∏—é...", reply_markup=reply_markup)
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ studio_command: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ studio_command: {e}")

async def portfolio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio"""
    try:
        user = update.effective_user
        user_name = get_user_name(user)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç: {user_name}")
        
        reply_markup = create_mini_app_keyboard("üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "#portfolio")
        await update.message.reply_text("üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç", reply_markup=reply_markup)
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ portfolio_command: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ portfolio_command: {e}")

async def booking_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /booking"""
    try:
        user = update.effective_user
        user_name = get_user_name(user)
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /booking –æ—Ç: {user_name}")
        
        reply_markup = create_mini_app_keyboard("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "#booking")
        await update.message.reply_text("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å", reply_markup=reply_markup)
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ booking_command: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ booking_command: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = (
            "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/studio - –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—É–¥–∏—é\n"
            "/portfolio - –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç\n"
            "/booking - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üì± –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Mini App!"
        )
        await update.message.reply_text(help_text)
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ help_command: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        message_text = update.message.text if update.message else "None"
        user_name = get_user_name(user)
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {message_text}")
        
        await update.message.reply_text(
            "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"üîë –¢–æ–∫–µ–Ω: {'–ï—Å—Ç—å' if BOT_TOKEN else '–ù–ï–¢!'}")
    logger.info(f"üì± URL Mini App: {MINI_APP_URL}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("studio", studio_command))
        application.add_handler(CommandHandler("portfolio", portfolio_command))
        application.add_handler(CommandHandler("booking", booking_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()